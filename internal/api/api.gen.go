// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BirthDate Дата рождения
type BirthDate = openapi_types.Date

// DialogMessage defines model for DialogMessage.
type DialogMessage struct {
	// From Идентификатор пользователя
	From UserId `json:"from"`

	// Text Текст сообщения
	Text DialogMessageText `json:"text"`

	// To Идентификатор пользователя
	To UserId `json:"to"`
}

// DialogMessageText Текст сообщения
type DialogMessageText = string

// Post Пост пользователя
type Post struct {
	// AuthorUserId Идентификатор пользователя
	AuthorUserId *UserId `json:"author_user_id,omitempty"`

	// Id Идентификатор поста
	Id *PostId `json:"id,omitempty"`

	// Text Текст поста
	Text *PostText `json:"text,omitempty"`
}

// PostId Идентификатор поста
type PostId = string

// PostText Текст поста
type PostText = string

// User defines model for User.
type User struct {
	// Age Возраст
	Age *int `json:"age,omitempty"`

	// Biography Интересы
	Biography *string `json:"biography,omitempty"`

	// Birthdate Дата рождения
	Birthdate *BirthDate `json:"birthdate,omitempty"`

	// City Город
	City *string `json:"city,omitempty"`

	// FirstName Имя
	FirstName *string `json:"first_name,omitempty"`

	// Id Идентификатор пользователя
	Id *UserId `json:"id,omitempty"`

	// SecondName Фамилия
	SecondName *string `json:"second_name,omitempty"`
}

// UserId Идентификатор пользователя
type UserId = string

// N5xx defines model for 5xx.
type N5xx struct {
	// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
	Code *int `json:"code,omitempty"`

	// Message Описание ошибки
	Message string `json:"message"`

	// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
	RequestId *string `json:"request_id,omitempty"`
}

// PostDialogUserIdSendJSONBody defines parameters for PostDialogUserIdSend.
type PostDialogUserIdSendJSONBody struct {
	// Text Текст сообщения
	Text DialogMessageText `json:"text"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {
	// Id Идентификатор пользователя
	Id       *UserId `json:"id,omitempty"`
	Password *string `json:"password,omitempty"`
}

// PostPostCreateJSONBody defines parameters for PostPostCreate.
type PostPostCreateJSONBody struct {
	// Text Текст поста
	Text PostText `json:"text"`
}

// GetPostFeedParams defines parameters for GetPostFeed.
type GetPostFeedParams struct {
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PutPostUpdateJSONBody defines parameters for PutPostUpdate.
type PutPostUpdateJSONBody struct {
	// Id Идентификатор поста
	Id PostId `json:"id"`

	// Text Текст поста
	Text PostText `json:"text"`
}

// PostUserRegisterJSONBody defines parameters for PostUserRegister.
type PostUserRegisterJSONBody struct {
	// Deprecated:
	Age       *int    `json:"age,omitempty"`
	Biography *string `json:"biography,omitempty"`

	// Birthdate Дата рождения
	Birthdate  *BirthDate `json:"birthdate,omitempty"`
	City       *string    `json:"city,omitempty"`
	FirstName  *string    `json:"first_name,omitempty"`
	Password   *string    `json:"password,omitempty"`
	SecondName *string    `json:"second_name,omitempty"`
}

// GetUserSearchParams defines parameters for GetUserSearch.
type GetUserSearchParams struct {
	// FirstName Условие поиска по имени
	FirstName string `form:"first_name" json:"first_name"`

	// LastName Условие поиска по фамилии
	LastName string `form:"last_name" json:"last_name"`
}

// PostDialogUserIdSendJSONRequestBody defines body for PostDialogUserIdSend for application/json ContentType.
type PostDialogUserIdSendJSONRequestBody PostDialogUserIdSendJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PostPostCreateJSONRequestBody defines body for PostPostCreate for application/json ContentType.
type PostPostCreateJSONRequestBody PostPostCreateJSONBody

// PutPostUpdateJSONRequestBody defines body for PutPostUpdate for application/json ContentType.
type PutPostUpdateJSONRequestBody PutPostUpdateJSONBody

// PostUserRegisterJSONRequestBody defines body for PostUserRegister for application/json ContentType.
type PostUserRegisterJSONRequestBody PostUserRegisterJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDialogUserIdList request
	GetDialogUserIdList(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDialogUserIdSend request with any body
	PostDialogUserIdSendWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDialogUserIdSend(ctx context.Context, userId UserId, body PostDialogUserIdSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFriendDeleteUserId request
	PutFriendDeleteUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFriendSetUserId request
	PutFriendSetUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogin request with any body
	PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPostCreate request with any body
	PostPostCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPostCreate(ctx context.Context, body PostPostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPostDeleteId request
	PutPostDeleteId(ctx context.Context, id PostId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostFeed request
	GetPostFeed(ctx context.Context, params *GetPostFeedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostGetId request
	GetPostGetId(ctx context.Context, id PostId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPostUpdate request with any body
	PutPostUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPostUpdate(ctx context.Context, body PutPostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGetId request
	GetUserGetId(ctx context.Context, id UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserRegister request with any body
	PostUserRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserRegister(ctx context.Context, body PostUserRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSearch request
	GetUserSearch(ctx context.Context, params *GetUserSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDialogUserIdList(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDialogUserIdListRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDialogUserIdSendWithBody(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDialogUserIdSendRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDialogUserIdSend(ctx context.Context, userId UserId, body PostDialogUserIdSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDialogUserIdSendRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFriendDeleteUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFriendDeleteUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFriendSetUserId(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFriendSetUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPostCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPostCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPostCreate(ctx context.Context, body PostPostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPostCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPostDeleteId(ctx context.Context, id PostId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPostDeleteIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostFeed(ctx context.Context, params *GetPostFeedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostFeedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostGetId(ctx context.Context, id PostId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostGetIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPostUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPostUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPostUpdate(ctx context.Context, body PutPostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPostUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGetId(ctx context.Context, id UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGetIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserRegister(ctx context.Context, body PostUserRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSearch(ctx context.Context, params *GetUserSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDialogUserIdListRequest generates requests for GetDialogUserIdList
func NewGetDialogUserIdListRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dialog/%s/list", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDialogUserIdSendRequest calls the generic PostDialogUserIdSend builder with application/json body
func NewPostDialogUserIdSendRequest(server string, userId UserId, body PostDialogUserIdSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDialogUserIdSendRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostDialogUserIdSendRequestWithBody generates requests for PostDialogUserIdSend with any type of body
func NewPostDialogUserIdSendRequestWithBody(server string, userId UserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dialog/%s/send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutFriendDeleteUserIdRequest generates requests for PutFriendDeleteUserId
func NewPutFriendDeleteUserIdRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/friend/delete/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutFriendSetUserIdRequest generates requests for PutFriendSetUserId
func NewPutFriendSetUserIdRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/friend/set/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLoginRequest calls the generic PostLogin builder with application/json body
func NewPostLoginRequest(server string, body PostLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPostCreateRequest calls the generic PostPostCreate builder with application/json body
func NewPostPostCreateRequest(server string, body PostPostCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPostCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPostCreateRequestWithBody generates requests for PostPostCreate with any type of body
func NewPostPostCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPostDeleteIdRequest generates requests for PutPostDeleteId
func NewPutPostDeleteIdRequest(server string, id PostId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/delete/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostFeedRequest generates requests for GetPostFeed
func NewGetPostFeedRequest(server string, params *GetPostFeedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/feed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostGetIdRequest generates requests for GetPostGetId
func NewGetPostGetIdRequest(server string, id PostId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/get/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPostUpdateRequest calls the generic PutPostUpdate builder with application/json body
func NewPutPostUpdateRequest(server string, body PutPostUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPostUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPostUpdateRequestWithBody generates requests for PutPostUpdate with any type of body
func NewPutPostUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserGetIdRequest generates requests for GetUserGetId
func NewGetUserGetIdRequest(server string, id UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/get/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRegisterRequest calls the generic PostUserRegister builder with application/json body
func NewPostUserRegisterRequest(server string, body PostUserRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserRegisterRequestWithBody generates requests for PostUserRegister with any type of body
func NewPostUserRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserSearchRequest generates requests for GetUserSearch
func NewGetUserSearchRequest(server string, params *GetUserSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, params.FirstName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, params.LastName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDialogUserIdList request
	GetDialogUserIdListWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetDialogUserIdListResponse, error)

	// PostDialogUserIdSend request with any body
	PostDialogUserIdSendWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDialogUserIdSendResponse, error)

	PostDialogUserIdSendWithResponse(ctx context.Context, userId UserId, body PostDialogUserIdSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDialogUserIdSendResponse, error)

	// PutFriendDeleteUserId request
	PutFriendDeleteUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PutFriendDeleteUserIdResponse, error)

	// PutFriendSetUserId request
	PutFriendSetUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PutFriendSetUserIdResponse, error)

	// PostLogin request with any body
	PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// PostPostCreate request with any body
	PostPostCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPostCreateResponse, error)

	PostPostCreateWithResponse(ctx context.Context, body PostPostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPostCreateResponse, error)

	// PutPostDeleteId request
	PutPostDeleteIdWithResponse(ctx context.Context, id PostId, reqEditors ...RequestEditorFn) (*PutPostDeleteIdResponse, error)

	// GetPostFeed request
	GetPostFeedWithResponse(ctx context.Context, params *GetPostFeedParams, reqEditors ...RequestEditorFn) (*GetPostFeedResponse, error)

	// GetPostGetId request
	GetPostGetIdWithResponse(ctx context.Context, id PostId, reqEditors ...RequestEditorFn) (*GetPostGetIdResponse, error)

	// PutPostUpdate request with any body
	PutPostUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPostUpdateResponse, error)

	PutPostUpdateWithResponse(ctx context.Context, body PutPostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPostUpdateResponse, error)

	// GetUserGetId request
	GetUserGetIdWithResponse(ctx context.Context, id UserId, reqEditors ...RequestEditorFn) (*GetUserGetIdResponse, error)

	// PostUserRegister request with any body
	PostUserRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserRegisterResponse, error)

	PostUserRegisterWithResponse(ctx context.Context, body PostUserRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserRegisterResponse, error)

	// GetUserSearch request
	GetUserSearchWithResponse(ctx context.Context, params *GetUserSearchParams, reqEditors ...RequestEditorFn) (*GetUserSearchResponse, error)
}

type GetDialogUserIdListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DialogMessage
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDialogUserIdListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDialogUserIdListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDialogUserIdSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostDialogUserIdSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDialogUserIdSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFriendDeleteUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutFriendDeleteUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFriendDeleteUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFriendSetUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutFriendSetUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFriendSetUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
	JSON500 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPostCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostId
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostPostCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPostCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPostDeleteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutPostDeleteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPostDeleteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Post
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPostFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostGetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Post
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPostGetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostGetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPostUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutPostUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPostUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserGetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		UserId *string `json:"user_id,omitempty"`
	}
	JSON500 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostUserRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
	JSON500      *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	JSON503 *struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDialogUserIdListWithResponse request returning *GetDialogUserIdListResponse
func (c *ClientWithResponses) GetDialogUserIdListWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetDialogUserIdListResponse, error) {
	rsp, err := c.GetDialogUserIdList(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDialogUserIdListResponse(rsp)
}

// PostDialogUserIdSendWithBodyWithResponse request with arbitrary body returning *PostDialogUserIdSendResponse
func (c *ClientWithResponses) PostDialogUserIdSendWithBodyWithResponse(ctx context.Context, userId UserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDialogUserIdSendResponse, error) {
	rsp, err := c.PostDialogUserIdSendWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDialogUserIdSendResponse(rsp)
}

func (c *ClientWithResponses) PostDialogUserIdSendWithResponse(ctx context.Context, userId UserId, body PostDialogUserIdSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDialogUserIdSendResponse, error) {
	rsp, err := c.PostDialogUserIdSend(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDialogUserIdSendResponse(rsp)
}

// PutFriendDeleteUserIdWithResponse request returning *PutFriendDeleteUserIdResponse
func (c *ClientWithResponses) PutFriendDeleteUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PutFriendDeleteUserIdResponse, error) {
	rsp, err := c.PutFriendDeleteUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFriendDeleteUserIdResponse(rsp)
}

// PutFriendSetUserIdWithResponse request returning *PutFriendSetUserIdResponse
func (c *ClientWithResponses) PutFriendSetUserIdWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PutFriendSetUserIdResponse, error) {
	rsp, err := c.PutFriendSetUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFriendSetUserIdResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

func (c *ClientWithResponses) PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// PostPostCreateWithBodyWithResponse request with arbitrary body returning *PostPostCreateResponse
func (c *ClientWithResponses) PostPostCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPostCreateResponse, error) {
	rsp, err := c.PostPostCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPostCreateResponse(rsp)
}

func (c *ClientWithResponses) PostPostCreateWithResponse(ctx context.Context, body PostPostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPostCreateResponse, error) {
	rsp, err := c.PostPostCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPostCreateResponse(rsp)
}

// PutPostDeleteIdWithResponse request returning *PutPostDeleteIdResponse
func (c *ClientWithResponses) PutPostDeleteIdWithResponse(ctx context.Context, id PostId, reqEditors ...RequestEditorFn) (*PutPostDeleteIdResponse, error) {
	rsp, err := c.PutPostDeleteId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPostDeleteIdResponse(rsp)
}

// GetPostFeedWithResponse request returning *GetPostFeedResponse
func (c *ClientWithResponses) GetPostFeedWithResponse(ctx context.Context, params *GetPostFeedParams, reqEditors ...RequestEditorFn) (*GetPostFeedResponse, error) {
	rsp, err := c.GetPostFeed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostFeedResponse(rsp)
}

// GetPostGetIdWithResponse request returning *GetPostGetIdResponse
func (c *ClientWithResponses) GetPostGetIdWithResponse(ctx context.Context, id PostId, reqEditors ...RequestEditorFn) (*GetPostGetIdResponse, error) {
	rsp, err := c.GetPostGetId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostGetIdResponse(rsp)
}

// PutPostUpdateWithBodyWithResponse request with arbitrary body returning *PutPostUpdateResponse
func (c *ClientWithResponses) PutPostUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPostUpdateResponse, error) {
	rsp, err := c.PutPostUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPostUpdateResponse(rsp)
}

func (c *ClientWithResponses) PutPostUpdateWithResponse(ctx context.Context, body PutPostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPostUpdateResponse, error) {
	rsp, err := c.PutPostUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPostUpdateResponse(rsp)
}

// GetUserGetIdWithResponse request returning *GetUserGetIdResponse
func (c *ClientWithResponses) GetUserGetIdWithResponse(ctx context.Context, id UserId, reqEditors ...RequestEditorFn) (*GetUserGetIdResponse, error) {
	rsp, err := c.GetUserGetId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGetIdResponse(rsp)
}

// PostUserRegisterWithBodyWithResponse request with arbitrary body returning *PostUserRegisterResponse
func (c *ClientWithResponses) PostUserRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserRegisterResponse, error) {
	rsp, err := c.PostUserRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostUserRegisterWithResponse(ctx context.Context, body PostUserRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserRegisterResponse, error) {
	rsp, err := c.PostUserRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserRegisterResponse(rsp)
}

// GetUserSearchWithResponse request returning *GetUserSearchResponse
func (c *ClientWithResponses) GetUserSearchWithResponse(ctx context.Context, params *GetUserSearchParams, reqEditors ...RequestEditorFn) (*GetUserSearchResponse, error) {
	rsp, err := c.GetUserSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSearchResponse(rsp)
}

// ParseGetDialogUserIdListResponse parses an HTTP response from a GetDialogUserIdListWithResponse call
func ParseGetDialogUserIdListResponse(rsp *http.Response) (*GetDialogUserIdListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDialogUserIdListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DialogMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostDialogUserIdSendResponse parses an HTTP response from a PostDialogUserIdSendWithResponse call
func ParsePostDialogUserIdSendResponse(rsp *http.Response) (*PostDialogUserIdSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDialogUserIdSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutFriendDeleteUserIdResponse parses an HTTP response from a PutFriendDeleteUserIdWithResponse call
func ParsePutFriendDeleteUserIdResponse(rsp *http.Response) (*PutFriendDeleteUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFriendDeleteUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutFriendSetUserIdResponse parses an HTTP response from a PutFriendSetUserIdWithResponse call
func ParsePutFriendSetUserIdResponse(rsp *http.Response) (*PutFriendSetUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFriendSetUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostPostCreateResponse parses an HTTP response from a PostPostCreateWithResponse call
func ParsePostPostCreateResponse(rsp *http.Response) (*PostPostCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPostCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutPostDeleteIdResponse parses an HTTP response from a PutPostDeleteIdWithResponse call
func ParsePutPostDeleteIdResponse(rsp *http.Response) (*PutPostDeleteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPostDeleteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetPostFeedResponse parses an HTTP response from a GetPostFeedWithResponse call
func ParseGetPostFeedResponse(rsp *http.Response) (*GetPostFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Post
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetPostGetIdResponse parses an HTTP response from a GetPostGetIdWithResponse call
func ParseGetPostGetIdResponse(rsp *http.Response) (*GetPostGetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostGetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Post
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutPostUpdateResponse parses an HTTP response from a PutPostUpdateWithResponse call
func ParsePutPostUpdateResponse(rsp *http.Response) (*PutPostUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPostUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetUserGetIdResponse parses an HTTP response from a GetUserGetIdWithResponse call
func ParseGetUserGetIdResponse(rsp *http.Response) (*GetUserGetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostUserRegisterResponse parses an HTTP response from a PostUserRegisterWithResponse call
func ParsePostUserRegisterResponse(rsp *http.Response) (*PostUserRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			UserId *string `json:"user_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetUserSearchResponse parses an HTTP response from a GetUserSearchWithResponse call
func ParseGetUserSearchResponse(rsp *http.Response) (*GetUserSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
			Code *int `json:"code,omitempty"`

			// Message Описание ошибки
			Message string `json:"message"`

			// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
			RequestId *string `json:"request_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(ctx echo.Context, userId UserId) error

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(ctx echo.Context, userId UserId) error

	// (PUT /friend/delete/{user_id})
	PutFriendDeleteUserId(ctx echo.Context, userId UserId) error

	// (PUT /friend/set/{user_id})
	PutFriendSetUserId(ctx echo.Context, userId UserId) error

	// (POST /login)
	PostLogin(ctx echo.Context) error

	// (POST /post/create)
	PostPostCreate(ctx echo.Context) error

	// (PUT /post/delete/{id})
	PutPostDeleteId(ctx echo.Context, id PostId) error

	// (GET /post/feed)
	GetPostFeed(ctx echo.Context, params GetPostFeedParams) error

	// (GET /post/get/{id})
	GetPostGetId(ctx echo.Context, id PostId) error

	// (PUT /post/update)
	PutPostUpdate(ctx echo.Context) error

	// (GET /user/get/{id})
	GetUserGetId(ctx echo.Context, id UserId) error

	// (POST /user/register)
	PostUserRegister(ctx echo.Context) error

	// (GET /user/search)
	GetUserSearch(ctx echo.Context, params GetUserSearchParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDialogUserIdList converts echo context to params.
func (w *ServerInterfaceWrapper) GetDialogUserIdList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDialogUserIdList(ctx, userId)
	return err
}

// PostDialogUserIdSend converts echo context to params.
func (w *ServerInterfaceWrapper) PostDialogUserIdSend(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDialogUserIdSend(ctx, userId)
	return err
}

// PutFriendDeleteUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PutFriendDeleteUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutFriendDeleteUserId(ctx, userId)
	return err
}

// PutFriendSetUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PutFriendSetUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutFriendSetUserId(ctx, userId)
	return err
}

// PostLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogin(ctx)
	return err
}

// PostPostCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostPostCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostPostCreate(ctx)
	return err
}

// PutPostDeleteId converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostDeleteId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPostDeleteId(ctx, id)
	return err
}

// GetPostFeed converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostFeed(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostFeedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostFeed(ctx, params)
	return err
}

// GetPostGetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostGetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPostGetId(ctx, id)
	return err
}

// PutPostUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PutPostUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutPostUpdate(ctx)
	return err
}

// GetUserGetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserGetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserGetId(ctx, id)
	return err
}

// PostUserRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserRegister(ctx)
	return err
}

// GetUserSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserSearch(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSearchParams
	// ------------- Required query parameter "first_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "first_name", ctx.QueryParams(), &params.FirstName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first_name: %s", err))
	}

	// ------------- Required query parameter "last_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "last_name", ctx.QueryParams(), &params.LastName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last_name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserSearch(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dialog/:user_id/list", wrapper.GetDialogUserIdList)
	router.POST(baseURL+"/dialog/:user_id/send", wrapper.PostDialogUserIdSend)
	router.PUT(baseURL+"/friend/delete/:user_id", wrapper.PutFriendDeleteUserId)
	router.PUT(baseURL+"/friend/set/:user_id", wrapper.PutFriendSetUserId)
	router.POST(baseURL+"/login", wrapper.PostLogin)
	router.POST(baseURL+"/post/create", wrapper.PostPostCreate)
	router.PUT(baseURL+"/post/delete/:id", wrapper.PutPostDeleteId)
	router.GET(baseURL+"/post/feed", wrapper.GetPostFeed)
	router.GET(baseURL+"/post/get/:id", wrapper.GetPostGetId)
	router.PUT(baseURL+"/post/update", wrapper.PutPostUpdate)
	router.GET(baseURL+"/user/get/:id", wrapper.GetUserGetId)
	router.POST(baseURL+"/user/register", wrapper.PostUserRegister)
	router.GET(baseURL+"/user/search", wrapper.GetUserSearch)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RaX28bxxH/KotrH0mR1B/H0Evh1EhawEWL2H4yDON0tyQ3Je/Oe3utBYOAJDpxDBlN",
	"kOahSNukf9HXE21GZ0qivsLsNypm9kjekUeJtCS7VR5sSeTe7vz5zcxvZu+p5fjtwPe4p0Jr86kleRj4",
	"Xsjpj/VqFX+4PHSkCJTwPWvTgr9CH3oQwxEk8BpO9D70GbyGGE5Gf/SgB0P8yOqUrPVqbc4mMfT0Hgz1",
	"DiRwCEPa1OzxBjcc6l29p7twirtsPHmCuzi+p7in8Fc7CFrCsXHDyqch7vrUCp0mb9v4WyD9gEsljCKO",
	"7/ICIb5FKRkM9ReQwAEMIFlh8L3egT4qBjEc4v/6OfThBCU60l8yGMARxHpX70Kin0ECA4j155BAwuBU",
	"78AQDuAI+nDM8JMDGNJffQYHep8UwiWvYMjwGP0Fbg0J7pt7eMUqWWo74NamJTzFG1yiEdo8DO1GkSbf",
	"wSkkepcMmOBpGZ0mW4VKCq+BO0n+OOKheiTcgs3+BK9RLL2X0ZD8xOAQYiMonrWAsc7QH05hSDIPIJ6v",
	"/UjkVGYhuWttPhhb4uF4ob/1KXeU1cGV08YZ2yJmehf6egd69H9slawmt10uCSWfcCW3y7fqissCq3xN",
	"qh7rL0sMlaS/DhEOwxTEQ9Syr19AH30b45cnugs/wAl6e5eMitDZ0y9zhrRKGdxOO71DCpnvScgPhVTN",
	"27YqQsE35KiYkTA/GC8iuKySxZ/Y7aCFW69Wax+Uq6vlas0qWXVftm1lbVou7lgAlNvCbvmNX02Alw+s",
	"uvTb+POnktetTesnlUk2qaRCV+6HXP7Sxc0Uf6LOW5078B4+gA/6ix4yhROSj55PT58FzJSO91IZp0z7",
	"D+jDAPGLnhwiVNHRBealkEgIYHslhEcMAzby/c+KTPwbPyw68XuTAE2cHOmXoxSp93AvOjXvCztSTV8+",
	"ikIu07hezCvnr0UJF/cgrjaO6xQYO91rqaxzakxB8TqxdM3dWNuouzfKH2ys1srrzlatbNs33HJ1rbbF",
	"P6itrjnr7jx7n+vlOWfe8SVvMxGEUZu5fsuXLBSK2W2uSszBuukoriLJbFcEInSE12C8JVSJhdxlrs+4",
	"iMK27zLF24EvmfAc4Qo38hSLFGvZW77kjCuzNWdtu+HZzG6Jx5G9wu5wR0Uha9uRFCGLWkoKh4eMSz9k",
	"wmNOJMMoZCqSgcBVYWivFKmPjp8N5OKy8jUM4RCTGZoia4jazaL6tCX8hrSD5nahe9G1lDb1rt7Px8y/",
	"KfcfQFJikOQXYhnVeytwWqjMFmZDN82GZ4FykjY7JcsRqkjEP6Zp/HVeuL9QtRtg7BWJUBcyVI88u80L",
	"tT6ezg+jj2Y2WiZmQ+74njvv1H9BDMeQIEObPn36q9kyOxOx6anLRuycnDV7YMidSAq1fRe1NGjc4rbk",
	"8lakmgXHfpWjjUS+iD9hld2DIQxIqG4pU5sNpTzQ+3A0kq07Yio9BseYrImx9lml5TeEN6rJKKoRZiJ6",
	"U6nA8Azh1akwKaHIur++d/8u+4VoNFu+7bJb0mkKhUYsWb/jMjTi11ZWV6poVj/gnh0Ia9NaW6muVDGd",
	"26pJ6ldcqkiVp2ku71RawtSIBqcfGLnEfNEv1sdcmRJmPHUH1+JuEvMScZsHTy2Bh+MJVskysLFGlSJb",
	"MpWMeJaPLFRzH5byfcOq6RsWJutC8Xa4FDGwJkC1pbS3C3nfN5BQmzKEV+RjpES6i8W4p7sYhXNxiiFi",
	"epfqPLHGCldw0aTPOW9tjbqZRfbFlofWri24NhNL5PJsFD142HmIC2ahFXKPgjtIaUgeW1gss+C6i6vf",
	"PbioW/nQd7cv0AS+JfucYpRzWGTHrJsNgilM/lPvwik1ftgVUH46pW6hR61P2irkCCb0rykU61Jwz624",
	"vMUVnyCSPBcVYTFSH9Ejt+mJFCH/C5lulroXZJWXTHdz3tddGpscYTlG3nPI4LXe0V04hD7Wq3lF9Fqj",
	"IeRqGSjc5eo64GBA85MYjjD6ezCEvpmRGDy8Gk3Srp3TDdnKVJ/pdJkOSUwqTEeD5qPPqT/YZRDrLlk2",
	"T0THIznz5TEjg5tpVayf43fJ0vyVZno5/kjcc0I7IR6Pvii09Us4wWCmQZ+ZepHwn+UHNGxqFpqKb5UK",
	"qvGdlJ9eTlFcpukI7DD8vS/piUxL8XdqmneIQ59AjPYYzfkGRS1TZ/Hi+baV3v8t9/JS8nV3ld/YqpYd",
	"l6+W11edjbJtO2vl6tbNtdqN+mqNb9xcTNTSWSU9Jl/OA2Qudy85VTdPri+RZRB5jCazbwzSrjDWKZgx",
	"hiuO5Gk7Pp9Q4r+fm3XvktzlBlMX4XQLy7jIUO0cRKV88NBgYTyXuqb1gCA0IoTnEABqTWjpgtX/AoV/",
	"7KyHb8Hyxzyv/yNxYJ1z96xpBVrzI1xT7LXHEZfbE7f59XrIVe6WxOV1O2opa7NacNnzTD+jW549huwg",
	"ez9DBdhcUiX0k65ienrfcALdzY04q9WS1RaeaEdtOijNDl7U3qKbmVKxuC3RFnOkrc2K+2dI4BgSuisY",
	"witqBZESPKc7hFj/Qb+ABEnPALN8GbkhI4J4CD0azI6Zkf4M625Xv0DM0ei6D2/yCmX0qc3q806mOHTZ",
	"scjwZqpRzpEuvT8OI/w10zRd56hqYGeU5sSzIutjrt5/Qry0Erk0OP6fM+zE2VEwutU4q/zdD9zLJFFX",
	"ehOYJVwEvMudpGHbdEy58EdQZaOQy6J8UNgZjDtVbAewugywOKY5dM4tzUxiwS5wTmK5jFuhy01Ol3Yx",
	"cd4h5ycntPnpW7rhCnrFr0bnQjzbH5op01WmNsKt5A0Rpu/YzBn7/I2mJUk6Rxhf8Z2QgTKvDy0CXsqT",
	"IZefjI69rGw5vjIPJHdsNQHpMrfk7/8S/G1vuhe50r6kidHMffdFLrQve9iUed/mvYybaKY5EywXSx5X",
	"ngNCbkuneXbloncDM6lyXlm6a/Y6ry6h3Y4oVySjpDx5+9AwCMMfklE9mmrsMvA/qzBNHfsf8/IMNprj",
	"A8Yz4owQ+dc0voUhnKQv3cyAZGnV9LNJkMxVr2VfSLv8Gedr+J3eLXo19d10oaZ2L9eFmkA5nQDzSsr2",
	"lUVep/PfAAAA///QqcQm6y0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
