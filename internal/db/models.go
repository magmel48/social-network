// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type UsersGender string

const (
	UsersGenderM UsersGender = "M"
	UsersGenderF UsersGender = "F"
	UsersGenderT UsersGender = "T"
)

func (e *UsersGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersGender(s)
	case string:
		*e = UsersGender(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersGender: %T", src)
	}
	return nil
}

type NullUsersGender struct {
	UsersGender UsersGender
	Valid       bool // Valid is true if UsersGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersGender) Scan(value interface{}) error {
	if value == nil {
		ns.UsersGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersGender), nil
}

type City struct {
	ID        int32        `db:"id" json:"id"`
	Name      string       `db:"name" json:"name"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt time.Time    `db:"updated_at" json:"updated_at"`
	DeletedAt sql.NullTime `db:"deleted_at" json:"deleted_at"`
}

type User struct {
	ID        int32           `db:"id" json:"id"`
	FirstName string          `db:"first_name" json:"first_name"`
	LastName  string          `db:"last_name" json:"last_name"`
	Password  string          `db:"password" json:"password"`
	Gender    NullUsersGender `db:"gender" json:"gender"`
	Birthday  time.Time       `db:"birthday" json:"birthday"`
	Biography sql.NullString  `db:"biography" json:"biography"`
	CreatedAt time.Time       `db:"created_at" json:"created_at"`
	UpdatedAt time.Time       `db:"updated_at" json:"updated_at"`
	DeletedAt sql.NullTime    `db:"deleted_at" json:"deleted_at"`
}

type UsersCity struct {
	ID     int32 `db:"id" json:"id"`
	UserID int32 `db:"user_id" json:"user_id"`
	CityID int32 `db:"city_id" json:"city_id"`
}
