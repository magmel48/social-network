// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :execrows
INSERT INTO users (first_name, last_name, login, password, gender, birthday) VALUES ($1, $2, $3, $4, $5, $6)
`

func (q *Queries) CreateUser(ctx context.Context) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const findUserByID = `-- name: FindUserByID :one
SELECT first_name, last_name, login, gender, birthday, created_at FROM users WHERE id = $1 LIMIT 1
`

type FindUserByIDRow struct {
	FirstName string      `db:"first_name" json:"first_name"`
	LastName  string      `db:"last_name" json:"last_name"`
	Login     string      `db:"login" json:"login"`
	Gender    UsersGender `db:"gender" json:"gender"`
	Birthday  time.Time   `db:"birthday" json:"birthday"`
	CreatedAt time.Time   `db:"created_at" json:"created_at"`
}

func (q *Queries) FindUserByID(ctx context.Context) (*FindUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByID)
	var i FindUserByIDRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Login,
		&i.Gender,
		&i.Birthday,
		&i.CreatedAt,
	)
	return &i, err
}
